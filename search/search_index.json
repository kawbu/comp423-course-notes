{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Kaw's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Kaw Bu</li> <li>Reviewer: Kamal Deep Vasireddy</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before we dive in, make sure you have:</p> <ol> <li>A GitHub account </li> <li>Git already installed</li> <li>Visual Studio Code</li> <li>Docker preinstalled</li> <li>COMP211 Credit</li> </ol>"},{"location":"tutorials/rust-setup/#project-setup","title":"Project Setup","text":""},{"location":"tutorials/rust-setup/#create-a-local-directory-and-initialize-git","title":"Create a Local Directory and Initialize Git","text":"<p>(A) Open your terminal/command prompt. (B) Create a new directory for your project.</p> <pre><code>mkdir rust-tutorial\ncd rust-tutorial\n</code></pre> <p>(C) Initialize a new Git repo:</p> <pre><code>git init\n</code></pre> <p>What is the effect of running the <code>init</code> subcommand?</p> <p>You should know what this does already</p> <p>(D) Create a README file:</p> <pre><code>echo \"# Rust Tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre>"},{"location":"tutorials/rust-setup/#create-a-remote-repo-on-github","title":"Create a Remote Repo on GitHub","text":"<p>(1) Log into your GitHub account and find the Create a New Repository page. (2) Fill in these following details:</p> <ul> <li>Repository Name: <code>rust-tutorial</code></li> <li>Description: \"Introductory project to the Rust programming language\"</li> <li>Visibility: Public  </li> </ul> <p>(3) Do not initialize the repository with a README, .gitignore, or license. (4) Click Create Repository</p>"},{"location":"tutorials/rust-setup/#link-your-local-repo-to-github","title":"Link your Local Repo to GitHub","text":"<p>(1) Add the GitHub repository as a remote: <code>git remote add origin https://github.com/&lt;bob-ross&gt;/rust-tutorial.git</code> Replace <code>&lt;bob-ross&gt;</code> with your GitHub username.  </p> <p>(2) Ensure your default branch name is <code>main</code> with the subcommand <code>git branch</code>. Rename it to <code>main</code> with the following command: <code>git branch -M main</code> if necessary.  </p> <p>(3) Push local commits to the GitHub repository: <code>git push --set-upstream origin main</code> </p> <p>Purpose of the '--set-upstream' Flag</p> <p>The command <code>git push --set upstream origin main</code> pushes the main branch to the remote repository origin. The flag serves to set up the main branch to track the remote branch, so that further pushes/pulls with/to that branch can be done without specifying the branch name and simply just writing <code>git push origin</code> will suffice when work is done on the local <code>main</code> branch.  </p> <p>(4) When refreshing your GitHub repository, you will now see that the same commit that was created locally has now been pushed to remote. The command <code>git log</code> can be used locally to see the commit ID and message, which should match the ID of the most recent commit on GitHub. This is a result of the previous step!</p>"},{"location":"tutorials/rust-setup/#setting-up-the-development-environment","title":"Setting up the Development Environment","text":""},{"location":"tutorials/rust-setup/#add-development-container-configuration","title":"Add Development Container Configuration","text":"<ol> <li>In VS Code, open the <code>rust-tutorial</code> directory.</li> <li>(If you havent already) Install the Dev Containers extension for VS Code</li> <li>Create a <code>.devcontainer</code> directory in the root of your project.  </li> <li>Create a <code>devcontainer.json</code> file within the <code>.devcontainer</code> directory, with the following code:</li> </ol> <pre><code>{\n  \"name\": \"Rust Tutorial\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre> <p>The <code>devcontainer.json</code> file defines the configuration for your development environment. In this case, we're specifying the following:</p> <pre><code>-`name`: A descriptive name for the container.  \n-`image`: The docker image to use.  \n-`customizations`: Adds useful configurations to VS Code.\n</code></pre>"},{"location":"tutorials/rust-setup/#opening-the-project-in-a-dev-container","title":"Opening the Project in a Dev Container","text":"<ol> <li>In VS Code, open the container by pressing <code>Ctrl+Shift+P</code>, and select the option which says \"Dev Containers: Reopen in Container\".</li> </ol> <p>Troubleshooting <code>Dev Containers: Reopen in Container</code></p> <p>Ensure you are inside of the rust-tutorial directory when running this command! Otherwise VS Code will prompt you to provide a container build, as it cannot detect the <code>.devcontainer</code> directory and <code>devcontainer.json</code> file!  </p> <ol> <li>Now, your dev container is set up! Close the current terminal tab, and open a new one.</li> <li>To ensure that rust is running, run the command <code>rustc --verison</code> and ensure no errors appear. This should also show you the latest version of Rust which has just been installed on your working container.</li> </ol> <p>Output of <code>rustc --version</code></p> <p>After creating your container and running <code>rustc --version</code>, you may see that your version of Rust differs from if you were to create your container a month or two ago! This is because programming languages are always receiving updates and changes!</p>"},{"location":"tutorials/rust-setup/#writing-your-first-rust-program","title":"Writing your first Rust Program","text":""},{"location":"tutorials/rust-setup/#what-is-rust","title":"What is Rust?","text":"<p>Rust is a fast and efficient programming language published on May 15, 2015. It is widely used for the creation of low-level projects, such as Operating Systems. It is favored by many people for multiple reasons, such as:</p> <ul> <li>Efficient Stack/Heap Storage</li> <li>Many Safety Features</li> <li>A Strong Ecosystem</li> </ul>"},{"location":"tutorials/rust-setup/#creating-a-rust-project-file","title":"Creating a Rust Project File","text":"<p>Before we begin creating your very first rust program, use the <code>cargo new hello_423 --vcs none</code> command. This will create a new binary project for you!</p> <p>Explaining what <code>cargo new hello_423 --vcs none</code> does</p> <p><code>cargo</code>: Cargo is a Rust package manager, similarly to Maven in Java (you may recall this if you took COMP301!) <code>new</code>: Keyword for creating a new project <code>--vcs none</code>: Necessary flag to prevent cargo from also creating a new <code>git</code> repo by default.  </p>"},{"location":"tutorials/rust-setup/#writing-and-running-your-very-first-rust-program","title":"Writing and Running your very first Rust program!","text":"<ol> <li>Navigate to the <code>main.rs</code> file within <code>hello_423/src/</code>, here, you should see the following code snippet: </li> </ol> <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre> <p>As you can see, this syntax is very similar to languages such as C and Java!</p> <ol> <li>Now, lets run your code! First, we must compile your program by first running <code>cargo build</code> after entering the <code>hello_423</code> directory.</li> </ol> <p>What does <code>cargo build</code> do?</p> <p>The <code>cargo build</code> will compile your <code>.rs</code> file into a file that is ready to be run on the working machine. This is very similar to the <code>gcc -c app.c</code> command that will transform a <code>.c</code> file into a <code>.o</code> file.</p> <ol> <li>Now, you should see a file named <code>Cargo.lock</code>, this file  contains information regarding your program's dependencies and allows your program to actually run. We are now ready to run the program! Run the code <code>cargo run</code>, and you should see the following output:</li> </ol> <p><code>Hello COMP423!</code></p> <p><code>cargo build</code> vs <code>cargo run</code></p> <p>The command <code>cargo build</code> is used to compile <code>.rs</code> code into a format where it can be turned into a program. On the other hand, the <code>cargo run</code> is typically used to execute the file that has just been compiled. However, if a compiled file does not exist, then the <code>cargo run</code> command will first compile the <code>.rs</code> file, and then run it.</p> <p>Congratulations, you have written and ran your very first Rust program using the Cargo package manager!</p>"}]}